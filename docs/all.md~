### demo of data extraction and rearrangement

我觉得你最新的体例规范的挺好的，每个文本都有固定的合适，这样比较方便提取和处理。虽然一些比较早的文件不是完全按照这个格式，但总体来说问题不大。

我把文件提取在doc/_data/yaml/ 中。这是yaml格式的文件，类似于数组。

yaml格式预览

```yaml
authorization: 'yes'
content: "\n\u56DB\u65F6\u6709\u5E8F\uFF0C\u4ECA\u65E5\u5927\u5BD2\u3002\n\n\u795D\
  \u5B89\u5EB7\u2026\u2026\n\n\n\n"
filename: "01-20-Lawyer_Tam-\u5927\u5BD2.md"
long_date: '2020-01-20 23:39:02'
pics:
- name: "./pic/01-20-Lawyer_Tam-\u5927\u5BD21.jpg)"
  url: "./pic/01-20-Lawyer_Tam-\u5927\u5BD21.jpg)"
source_url:
- "\uFF1Ahttps://www.douban.com/note/749673092/\n"
title: "\u5927\u5BD2"
```

### check again

{{ site.data.articles[0][1] }}

{{ site.data.articles[1] }}


A sample of how to call the yaml data in jekyll/Github Pages.

```html
{% raw %}
| index | auth | title | long_date | author | pics |
{% for item in site.data.yaml  %}{% assign article = item[1] %}| {{ forloop.index }} | {{ article.authorization }} |  {{ article.title }} |   {{ article.long_date }} | {{ article.author }} | {% if article.pics[0] %}  pics {% endif %} | {{ article.pics | size }} |
{% endfor %}
{% endraw %}
```

The above code will produce the following markdown table

| id | auth | title | long_date | author | pics | source |
{% for item in site.data.yaml  limit: 1050 %}{% assign article = item[1] %}| {{ article.index }} | {{ article.authorization }} |  {{ article.title }} |   {{ article.long_date }} | {{ article.author }} |  {{ article.pics | size }} | [{{ article.source }}]({{ article.source_url }}) |
{% endfor %}




